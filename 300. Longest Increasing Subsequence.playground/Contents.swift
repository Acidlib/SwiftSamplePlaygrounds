// Runtime: 76 ms, faster than 70.97% of Swift online submissions for Longest Increasing Subsequence.
// Memory Usage: 14.4 MB, less than 17.51% of Swift online submissions for Longest Increasing Subsequence.
class Solution {
    func lengthOfLIS(_ nums: [Int]) -> Int {
        var dpArray = Array(repeating: 1, count: nums.count)
        var maxValue = 1
        // print("=======================================")
        // print("START: \(nums)")
        // print("=======================================")
        for end in 1 ..< nums.count {
            // iterate to "end"
            for start in 0 ..< end {
                // `dpArray[end] <= dpArray[start]` Please don't forget the equal
                if nums[end] > nums[start] && dpArray[end] <= dpArray[start] {
                    dpArray[end] = dpArray[start] + 1
                    maxValue = max(maxValue, dpArray[end])
                }
                // print("\(start)[\(nums[start])] \(end)[\(nums[end])]: \(dpArray)")
            }
        }
        return maxValue
    }
}

// -------------------------------------------------------------------------------
// Runtime: 34 ms, faster than 97.69% of Swift online submissions for Longest Increasing Subsequence. Memory Usage: 13.7 MB, less than 96.76% of Swift online submissions for Longest Increasing Subsequence.
// -------------------------------------------------------------------------------
class Solution2 {
    func lengthOfLIS(_ nums: [Int]) -> Int {
        if nums.isEmpty {
            return 0
        }
        print("=======================================")
        print("START: \(nums)")
        print("=======================================")

        var tails = [nums[0]]
        
        for num in nums {
            var left = 0
            var right = tails.count - 1
            var middle = 0
            while left != right {
                middle = (left + right) / 2
                if tails[middle] < num {
                    left = middle + 1
                } else {
                    right = middle
                }
            }
            
            if left == tails.count - 1 && tails[left] < num {
                print("L:\(left) R:\(right) | \(tails) \(num)")
                tails.append(num)
            } else {
                tails[left] = num
                print("L:\(left) R:\(right) | \(tails)")
            }
        }
        print("final: \(tails)")
        return tails.count
    }
}

// ------------------------------------------------------------------------------

let solution = Solution()
var answer = solution.lengthOfLIS([10,9,2,5,3,7,101,18])
print(answer == 4)

answer = solution.lengthOfLIS([0,1,0,3,2,3])
print(answer == 4)

answer = solution.lengthOfLIS([7,7,7,7,7,7,7])
print(answer == 1)

//=======================================
//START: [10, 9, 2, 5, 3, 7, 101, 18]
//=======================================
//0[10] 1[9]: [1, 1, 1, 1, 1, 1, 1, 1]
//0[10] 2[2]: [1, 1, 1, 1, 1, 1, 1, 1]
//1[9] 2[2]: [1, 1, 1, 1, 1, 1, 1, 1]
//0[10] 3[5]: [1, 1, 1, 1, 1, 1, 1, 1]
//1[9] 3[5]: [1, 1, 1, 1, 1, 1, 1, 1]
//2[2] 3[5]: [1, 1, 1, 2, 1, 1, 1, 1]
//0[10] 4[3]: [1, 1, 1, 2, 1, 1, 1, 1]
//1[9] 4[3]: [1, 1, 1, 2, 1, 1, 1, 1]
//2[2] 4[3]: [1, 1, 1, 2, 2, 1, 1, 1]
//3[5] 4[3]: [1, 1, 1, 2, 2, 1, 1, 1]
//0[10] 5[7]: [1, 1, 1, 2, 2, 1, 1, 1]
//1[9] 5[7]: [1, 1, 1, 2, 2, 1, 1, 1]
//2[2] 5[7]: [1, 1, 1, 2, 2, 2, 1, 1]
//3[5] 5[7]: [1, 1, 1, 2, 2, 3, 1, 1]
//4[3] 5[7]: [1, 1, 1, 2, 2, 3, 1, 1]
//0[10] 6[101]: [1, 1, 1, 2, 2, 3, 2, 1]
//1[9] 6[101]: [1, 1, 1, 2, 2, 3, 2, 1]
//2[2] 6[101]: [1, 1, 1, 2, 2, 3, 2, 1]
//3[5] 6[101]: [1, 1, 1, 2, 2, 3, 3, 1]
//4[3] 6[101]: [1, 1, 1, 2, 2, 3, 3, 1]
//5[7] 6[101]: [1, 1, 1, 2, 2, 3, 4, 1]
//0[10] 7[18]: [1, 1, 1, 2, 2, 3, 4, 2]
//1[9] 7[18]: [1, 1, 1, 2, 2, 3, 4, 2]
//2[2] 7[18]: [1, 1, 1, 2, 2, 3, 4, 2]
//3[5] 7[18]: [1, 1, 1, 2, 2, 3, 4, 3]
//4[3] 7[18]: [1, 1, 1, 2, 2, 3, 4, 3]
//5[7] 7[18]: [1, 1, 1, 2, 2, 3, 4, 4]
//6[101] 7[18]: [1, 1, 1, 2, 2, 3, 4, 4]
//true
//=======================================
//START: [0, 1, 0, 3, 2, 3]
//=======================================
//0[0] 1[1]: [1, 2, 1, 1, 1, 1]
//0[0] 2[0]: [1, 2, 1, 1, 1, 1]
//1[1] 2[0]: [1, 2, 1, 1, 1, 1]
//0[0] 3[3]: [1, 2, 1, 2, 1, 1]
//1[1] 3[3]: [1, 2, 1, 3, 1, 1]
//2[0] 3[3]: [1, 2, 1, 3, 1, 1]
//0[0] 4[2]: [1, 2, 1, 3, 2, 1]
//1[1] 4[2]: [1, 2, 1, 3, 3, 1]
//2[0] 4[2]: [1, 2, 1, 3, 3, 1]
//3[3] 4[2]: [1, 2, 1, 3, 3, 1]
//0[0] 5[3]: [1, 2, 1, 3, 3, 2]
//1[1] 5[3]: [1, 2, 1, 3, 3, 3]
//2[0] 5[3]: [1, 2, 1, 3, 3, 3]
//3[3] 5[3]: [1, 2, 1, 3, 3, 3]
//4[2] 5[3]: [1, 2, 1, 3, 3, 4]
//true
//=======================================
//START: [7, 7, 7, 7, 7, 7, 7]
//=======================================
//0[7] 1[7]: [1, 1, 1, 1, 1, 1, 1]
//0[7] 2[7]: [1, 1, 1, 1, 1, 1, 1]
//1[7] 2[7]: [1, 1, 1, 1, 1, 1, 1]
//0[7] 3[7]: [1, 1, 1, 1, 1, 1, 1]
//1[7] 3[7]: [1, 1, 1, 1, 1, 1, 1]
//2[7] 3[7]: [1, 1, 1, 1, 1, 1, 1]
//0[7] 4[7]: [1, 1, 1, 1, 1, 1, 1]
//1[7] 4[7]: [1, 1, 1, 1, 1, 1, 1]
//2[7] 4[7]: [1, 1, 1, 1, 1, 1, 1]
//3[7] 4[7]: [1, 1, 1, 1, 1, 1, 1]
//0[7] 5[7]: [1, 1, 1, 1, 1, 1, 1]
//1[7] 5[7]: [1, 1, 1, 1, 1, 1, 1]
//2[7] 5[7]: [1, 1, 1, 1, 1, 1, 1]
//3[7] 5[7]: [1, 1, 1, 1, 1, 1, 1]
//4[7] 5[7]: [1, 1, 1, 1, 1, 1, 1]
//0[7] 6[7]: [1, 1, 1, 1, 1, 1, 1]
//1[7] 6[7]: [1, 1, 1, 1, 1, 1, 1]
//2[7] 6[7]: [1, 1, 1, 1, 1, 1, 1]
//3[7] 6[7]: [1, 1, 1, 1, 1, 1, 1]
//4[7] 6[7]: [1, 1, 1, 1, 1, 1, 1]
//5[7] 6[7]: [1, 1, 1, 1, 1, 1, 1]

// ------------------------------------------------------------------------------

let solution2 = Solution2()
var answer2 = solution2.lengthOfLIS([10,9,2,5,3,7,101,18])
print(answer2 == 4)

answer2 = solution2.lengthOfLIS([0,1,0,3,2,3])
print(answer2 == 4)

answer2 = solution2.lengthOfLIS([7,7,7,7,7,7,7])
print(answer2 == 1)


answer2 = solution2.lengthOfLIS([0,1,2,101,102,103,104])
print(answer2 == 7)

answer2 = solution2.lengthOfLIS([101,102,103,104,0,1,2,])
print(answer2 == 4)

answer2 = solution2.lengthOfLIS([101,102,103,0,1,2,3])
print(answer2 == 4)

//=======================================
//START: [10, 9, 2, 5, 3, 7, 101, 18]
//=======================================
//L:0 R:0 | [10]
//L:0 R:0 | [9]
//L:0 R:0 | [2]
//L:0 R:0 | [2] 5
//L:1 R:1 | [2, 3]
//L:1 R:1 | [2, 3] 7
//L:2 R:2 | [2, 3, 7] 101
//L:3 R:3 | [2, 3, 7, 18]
//final: [2, 3, 7, 18]
//true
//=======================================
//START: [0, 1, 0, 3, 2, 3]
//=======================================
//L:0 R:0 | [0]
//L:0 R:0 | [0] 1
//L:0 R:0 | [0, 1]
//L:1 R:1 | [0, 1] 3
//L:2 R:2 | [0, 1, 2]
//L:2 R:2 | [0, 1, 2] 3
//final: [0, 1, 2, 3]
//true
//=======================================
//START: [7, 7, 7, 7, 7, 7, 7]
//=======================================
//L:0 R:0 | [7]
//L:0 R:0 | [7]
//L:0 R:0 | [7]
//L:0 R:0 | [7]
//L:0 R:0 | [7]
//L:0 R:0 | [7]
//L:0 R:0 | [7]
//final: [7]
//true
